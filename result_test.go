package bdm

import (
	"fmt"
	"reflect"
	"testing"
)

func TestResultHeader(t *testing.T) {
	r := Result{0x21, 0x01, 0x00, 0x00, 0x0C, 0x01, 0xA2, 0x42, 0x44, 0x4D, 0x34, 0x30, 0x36, 0x35, 0x55, 0x43, 0xD5}
	h := r.Header()

	if !reflect.DeepEqual(h, []byte{0x21, 0x01, 0x00, 0x00, 0x0C, 0x01}) {
		t.Errorf("%v is not header.", h)
	}
}

func TestResultData(t *testing.T) {
	r := Result{0x21, 0x01, 0x00, 0x00, 0x04, 0x01, 0x00, 0x03, 0x26}
	d := r.Data()

	if !reflect.DeepEqual(d, []byte{0x00, 0x03}) {
		t.Errorf("%v is not data.", d)
	}
}

func TestResultChecksum(t *testing.T) {
	r := Result{0x21, 0x01, 0x00, 0x00, 0x0C, 0x01, 0xA2, 0x42, 0x44, 0x4D, 0x34, 0x30, 0x36, 0x35, 0x55, 0x43, 0xD5}
	d := r.checksum()

	if d != 0xD5 {
		t.Errorf("%X is not checksum.", d)
	}
}

func TestResultCheckChecksum(t *testing.T) {
	ok := func(r Result) {
		err := r.CheckChecksum()
		if err != nil {
			t.Error(err)
		}
	}

	ok(Result{0x21, 0x01, 0x00, 0x00, 0x0C, 0x01, 0xA2, 0x42, 0x44, 0x4D, 0x34, 0x30, 0x36, 0x35, 0x55, 0x43, 0xD5})
	ok(Result{0x21, 0x01, 0x00, 0x00, 0x04, 0x01, 0x00, 0x03, 0x26})

	ng := func(r Result) {
		err := r.CheckChecksum()
		if err == nil {
			t.Error("Expected error, but got nil")
		}
	}

	ng(Result{0x21, 0x01, 0x00, 0x00, 0x0C, 0x01, 0xA2, 0x42, 0x44, 0x4D, 0x34, 0x30, 0x36, 0x35, 0x55, 0x43, 0xD7})
	ng(Result{0x21, 0x01, 0x00, 0x00, 0x04, 0x01, 0x00, 0x03, 0x24})
}

func TestResultStringer(t *testing.T) {
	r := Result{0x21, 0x01, 0x00, 0x00, 0x0C, 0x01, 0xA2, 0x42, 0x44, 0x4D, 0x34, 0x30, 0x36, 0x35, 0x55, 0x43, 0xD7}
	e := "BDM4065UC"
	if r.String() != e {
		t.Errorf("Expected %s, but got %s", e, r)
	}
}

var _ fmt.Stringer = Result{}
